#!/usr/bin/env python3
"""
Hibla Automation Controller
===========================

Manages autonomous workflow operations, document generation triggers,
and coordinates between main application and document service.
"""

import requests
import json
import time
import threading
from datetime import datetime
import schedule

class HiblaAutomationController:
    def __init__(self):
        self.main_app_url = "http://localhost:5000"
        self.doc_service_url = "http://localhost:5001"
        self.running = False
        
    def start_automation(self):
        """Start the automation controller"""
        self.running = True
        print("üöÄ Hibla Automation Controller Started")
        print(f"üì° Main App: {self.main_app_url}")
        print(f"üìÑ Document Service: {self.doc_service_url}")
        
        # Schedule automated tasks
        schedule.every(5).minutes.do(self.monitor_quotations)
        schedule.every(10).minutes.do(self.process_pending_orders)
        schedule.every(15).minutes.do(self.generate_reports)
        
        # Start monitoring thread
        monitor_thread = threading.Thread(target=self.run_scheduler, daemon=True)
        monitor_thread.start()
        
        return True
    
    def run_scheduler(self):
        """Run scheduled tasks"""
        while self.running:
            schedule.run_pending()
            time.sleep(30)
    
    def monitor_quotations(self):
        """Monitor quotations and trigger document generation"""
        try:
            print("üîç Monitoring quotations for automation triggers...")
            
            # Check for new quotations (simulation)
            quotations_to_process = self.get_pending_quotations()
            
            for quotation in quotations_to_process:
                self.auto_generate_quotation_document(quotation)
                
        except Exception as e:
            print(f"‚ùå Quotation monitoring error: {e}")
    
    def process_pending_orders(self):
        """Process pending sales orders and job orders"""
        try:
            print("‚öôÔ∏è Processing pending orders...")
            
            # Simulate order processing
            pending_orders = self.get_pending_orders()
            
            for order in pending_orders:
                self.auto_generate_order_documents(order)
                
        except Exception as e:
            print(f"‚ùå Order processing error: {e}")
    
    def generate_reports(self):
        """Generate automated reports"""
        try:
            print("üìä Generating automated reports...")
            
            # Create daily summary report
            report_content = self.build_daily_report()
            
            self.generate_document({
                'filename_base': f'daily_report_{datetime.now().strftime("%Y%m%d")}',
                'content': report_content,
                'formats': ['pdf', 'docx']
            })
            
        except Exception as e:
            print(f"‚ùå Report generation error: {e}")
    
    def get_pending_quotations(self):
        """Get quotations that need document generation"""
        # In production, this would query the main application API
        return [
            {
                'id': 'QT-AUTO-001',
                'customer': 'Automated Customer',
                'status': 'pending_document',
                'created': datetime.now().isoformat()
            }
        ]
    
    def get_pending_orders(self):
        """Get orders that need processing"""
        # In production, this would query the main application API
        return [
            {
                'id': 'SO-AUTO-001',
                'type': 'sales_order',
                'status': 'confirmed',
                'needs_job_order': True
            }
        ]
    
    def build_daily_report(self):
        """Build daily summary report content"""
        today = datetime.now().strftime("%Y-%m-%d")
        
        return f"""# HIBLA MANUFACTURING DAILY REPORT

**Report Date**: {today}
**Generated**: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## Automation Summary
- Document Generation Service: Active
- Quotation Processing: Automated
- Order Processing: Automated
- Report Generation: Automated

## System Status
- Main Application: Operational
- Document Service: Operational
- Database: Connected
- Authentication: Active

## Daily Metrics
- Quotations Processed: Automated tracking active
- Sales Orders: Automated processing active
- Job Orders: Automated creation active
- Documents Generated: Continuous generation

## Next Actions
- Continue automated monitoring
- Process pending workflows
- Generate scheduled reports
- Maintain system operations

---
*Generated by Hibla Automation Controller*
*System operational and monitoring active*
"""
    
    def auto_generate_quotation_document(self, quotation):
        """Auto-generate quotation document"""
        content = f"""# AUTOMATED QUOTATION - {quotation['id']}

**Generated**: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
**Customer**: {quotation['customer']}
**Status**: {quotation['status']}

## Automated Processing
This quotation was automatically processed by the Hibla Automation system.

## Customer Information
- Customer ID: {quotation['id']}
- Processing Status: Automated
- Document Generation: Complete

## Next Steps
- Customer notification (automated)
- Follow-up scheduling (automated)
- Conversion tracking (automated)

---
*Generated automatically by Hibla Manufacturing Automation*
"""
        
        self.generate_document({
            'filename_base': f'auto_quotation_{quotation["id"]}',
            'content': content,
            'formats': ['pdf', 'docx']
        })
    
    def auto_generate_order_documents(self, order):
        """Auto-generate order documents"""
        if order['needs_job_order']:
            content = f"""# AUTOMATED JOB ORDER - {order['id']}

**Generated**: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
**Source Order**: {order['id']}
**Type**: {order['type']}

## Automated Job Order Creation
This job order was automatically created from confirmed sales order.

## Production Instructions
- Priority: Standard automated processing
- Quality Control: Standard procedures
- Timeline: Automated scheduling

## Status Tracking
- Created: Automated
- Assigned: Automated
- Monitoring: Active

---
*Generated automatically by Hibla Manufacturing Automation*
"""
            
            self.generate_document({
                'filename_base': f'auto_job_order_{order["id"]}',
                'content': content,
                'formats': ['pdf', 'docx']
            })
    
    def generate_document(self, doc_data):
        """Generate document via service"""
        try:
            response = requests.post(
                f"{self.doc_service_url}/api/documents/generate",
                json=doc_data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Auto-generated: {doc_data['filename_base']}")
                return result
            else:
                print(f"‚ùå Document generation failed: {response.text}")
                
        except Exception as e:
            print(f"‚ùå Document service error: {e}")
    
    def stop_automation(self):
        """Stop the automation controller"""
        self.running = False
        print("üõë Automation Controller Stopped")

def main():
    """Main automation entry point"""
    controller = HiblaAutomationController()
    
    try:
        # Start automation
        controller.start_automation()
        
        print("üîÑ Automation is now running...")
        print("üìã Monitoring quotations, orders, and generating reports")
        print("‚è∞ Scheduled tasks active")
        print("üöÄ Press Ctrl+C to stop")
        
        # Keep running
        while controller.running:
            time.sleep(1)
            
    except KeyboardInterrupt:
        controller.stop_automation()
        print("\n‚úÖ Automation stopped gracefully")

if __name__ == "__main__":
    main()